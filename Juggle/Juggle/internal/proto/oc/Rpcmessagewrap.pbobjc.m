// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: rpcmessagewrap.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Rpcmessagewrap.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(RpcMessageWraper);

#pragma mark - RpcmessagewrapRoot

@implementation RpcmessagewrapRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription RpcmessagewrapRoot_FileDescription = {
  .package = "rpc_message_wrap",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum RpcMsgType

GPBEnumDescriptor *RpcMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "UserPub\000UserPubAck\000ServerPub\000ServerPubAc"
        "k\000QueryMsg\000QueryAck\000QueryConfirm\000";
    static const int32_t values[] = {
        RpcMsgType_UserPub,
        RpcMsgType_UserPubAck,
        RpcMsgType_ServerPub,
        RpcMsgType_ServerPubAck,
        RpcMsgType_QueryMsg,
        RpcMsgType_QueryAck,
        RpcMsgType_QueryConfirm,
    };
    static const char *extraTextFormatInfo = "\007\000\007\000\001\n\000\002\t\000\003\014\000\004\010\000\005\010\000\006\014\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RpcMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RpcMsgType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RpcMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RpcMsgType_UserPub:
    case RpcMsgType_UserPubAck:
    case RpcMsgType_ServerPub:
    case RpcMsgType_ServerPubAck:
    case RpcMsgType_QueryMsg:
    case RpcMsgType_QueryAck:
    case RpcMsgType_QueryConfirm:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RpcMessageWraper

@implementation RpcMessageWraper

@dynamic rpcMsgType;
@dynamic appKey;
@dynamic session;
@dynamic method;
@dynamic targetId;
@dynamic sourceMethod;
@dynamic requesterId;
@dynamic qos;
@dynamic reqIndex;
@dynamic publishType;
@dynamic isFromApi;
@dynamic extParams, extParams_Count;
@dynamic terminalNum;
@dynamic resultCode;
@dynamic msgSendTime;
@dynamic msgId;
@dynamic groupId;
@dynamic targetIdsArray, targetIdsArray_Count;
@dynamic appDataBytes;

typedef struct RpcMessageWraper__storage_ {
  uint32_t _has_storage_[1];
  RpcMsgType rpcMsgType;
  int32_t qos;
  int32_t reqIndex;
  int32_t publishType;
  int32_t terminalNum;
  int32_t resultCode;
  NSString *appKey;
  NSString *session;
  NSString *method;
  NSString *targetId;
  NSString *sourceMethod;
  NSString *requesterId;
  NSMutableDictionary *extParams;
  NSString *msgId;
  NSString *groupId;
  NSMutableArray *targetIdsArray;
  NSData *appDataBytes;
  int64_t msgSendTime;
} RpcMessageWraper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rpcMsgType",
        .dataTypeSpecific.enumDescFunc = RpcMsgType_EnumDescriptor,
        .number = RpcMessageWraper_FieldNumber_RpcMsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, rpcMsgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appKey",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_AppKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "session",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "method",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_Method,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_TargetId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceMethod",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_SourceMethod,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, sourceMethod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requesterId",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_RequesterId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, requesterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qos",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_Qos,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, qos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reqIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_ReqIndex,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, reqIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "publishType",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_PublishType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, publishType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFromApi",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_IsFromApi,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "extParams",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_ExtParams,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, extParams),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "terminalNum",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_TerminalNum,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, terminalNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_ResultCode,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_MsgSendTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, msgSendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_MsgId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_GroupId,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_TargetIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, targetIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appDataBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcMessageWraper_FieldNumber_AppDataBytes,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(RpcMessageWraper__storage_, appDataBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(RpcMessageWraper)
                                   messageName:@"RpcMessageWraper"
                               fileDescription:&RpcmessagewrapRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RpcMessageWraper__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\020\001\n\000\002\006\000\005\010\000\006\014\000\007\013\000\t\010\000\n\013\000\013\t\000\014\t\000\r\013\000\025\n\000\026\013\000\027\005\000"
        "\037\007\000 \000targetIds\0002\014\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RpcMessageWraper_RpcMsgType_RawValue(RpcMessageWraper *message) {
  GPBDescriptor *descriptor = [RpcMessageWraper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RpcMessageWraper_FieldNumber_RpcMsgType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRpcMessageWraper_RpcMsgType_RawValue(RpcMessageWraper *message, int32_t value) {
  GPBDescriptor *descriptor = [RpcMessageWraper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RpcMessageWraper_FieldNumber_RpcMsgType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
