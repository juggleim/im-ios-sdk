// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: appmessages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Appmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AddHisMsgReq);
GPBObjCClassDeclaration(ClearUnreadReq);
GPBObjCClassDeclaration(Conversation);
GPBObjCClassDeclaration(DelConversationReq);
GPBObjCClassDeclaration(DownMsg);
GPBObjCClassDeclaration(DownMsgSet);
GPBObjCClassDeclaration(IndexScope);
GPBObjCClassDeclaration(MarkReadReq);
GPBObjCClassDeclaration(MentionInfo);
GPBObjCClassDeclaration(MentionMsg);
GPBObjCClassDeclaration(Notify);
GPBObjCClassDeclaration(PushData);
GPBObjCClassDeclaration(QryConversationsReq);
GPBObjCClassDeclaration(QryConversationsResp);
GPBObjCClassDeclaration(QryHisMsgsReq);
GPBObjCClassDeclaration(QryMentionMsgsReq);
GPBObjCClassDeclaration(QryMentionMsgsResp);
GPBObjCClassDeclaration(QryMsgLatestIndexReq);
GPBObjCClassDeclaration(QryMsgLatestIndexResp);
GPBObjCClassDeclaration(RecallMsgReq);
GPBObjCClassDeclaration(SimpleMsg);
GPBObjCClassDeclaration(SyncConversationsReq);
GPBObjCClassDeclaration(SyncMsgReq);
GPBObjCClassDeclaration(UpMsg);

#pragma mark - AppmessagesRoot

@implementation AppmessagesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AppmessagesRoot_FileDescription = {
  .package = "app_messages",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum MentionType

GPBEnumDescriptor *MentionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "MentionDefault\000MentionAll\000MentionSomeone"
        "\000MentionAllAndSomeone\000";
    static const int32_t values[] = {
        MentionType_MentionDefault,
        MentionType_MentionAll,
        MentionType_MentionSomeone,
        MentionType_MentionAllAndSomeone,
    };
    static const char *extraTextFormatInfo = "\004\000\016\000\001\n\000\002\016\000\003\024\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MentionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MentionType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MentionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MentionType_MentionDefault:
    case MentionType_MentionAll:
    case MentionType_MentionSomeone:
    case MentionType_MentionAllAndSomeone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ChannelType

GPBEnumDescriptor *ChannelType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Unknown\000Private\000Group\000Chatroom\000System\000";
    static const int32_t values[] = {
        ChannelType_Unknown,
        ChannelType_Private,
        ChannelType_Group,
        ChannelType_Chatroom,
        ChannelType_System,
    };
    static const char *extraTextFormatInfo = "\005\000\007\000\001\007\000\002\005\000\003\010\000\004\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChannelType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChannelType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChannelType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChannelType_Unknown:
    case ChannelType_Private:
    case ChannelType_Group:
    case ChannelType_Chatroom:
    case ChannelType_System:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum NotifyType

GPBEnumDescriptor *NotifyType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Default\000Msg\000";
    static const int32_t values[] = {
        NotifyType_Default,
        NotifyType_Msg,
    };
    static const char *extraTextFormatInfo = "\002\000\007\000\001\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NotifyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NotifyType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NotifyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case NotifyType_Default:
    case NotifyType_Msg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UpMsg

@implementation UpMsg

@dynamic msgType;
@dynamic msgContent;
@dynamic flags;
@dynamic clientUid;
@dynamic hasPushData, pushData;
@dynamic hasMentionInfo, mentionInfo;

typedef struct UpMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t flags;
  NSString *msgType;
  NSData *msgContent;
  NSString *clientUid;
  PushData *pushData;
  MentionInfo *mentionInfo;
} UpMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = UpMsg_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpMsg__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = UpMsg_FieldNumber_MsgContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpMsg__storage_, msgContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "flags",
        .dataTypeSpecific.clazz = Nil,
        .number = UpMsg_FieldNumber_Flags,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpMsg__storage_, flags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "clientUid",
        .dataTypeSpecific.clazz = Nil,
        .number = UpMsg_FieldNumber_ClientUid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpMsg__storage_, clientUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushData",
        .dataTypeSpecific.clazz = GPBObjCClass(PushData),
        .number = UpMsg_FieldNumber_PushData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpMsg__storage_, pushData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mentionInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(MentionInfo),
        .number = UpMsg_FieldNumber_MentionInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpMsg__storage_, mentionInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(UpMsg)
                                   messageName:@"UpMsg"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\005\001\007\000\002\n\000\004\t\000\005\010\000\006\013\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MentionInfo

@implementation MentionInfo

@dynamic mentionType;
@dynamic targetIdsArray, targetIdsArray_Count;

typedef struct MentionInfo__storage_ {
  uint32_t _has_storage_[1];
  MentionType mentionType;
  NSMutableArray *targetIdsArray;
} MentionInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentionType",
        .dataTypeSpecific.enumDescFunc = MentionType_EnumDescriptor,
        .number = MentionInfo_FieldNumber_MentionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MentionInfo__storage_, mentionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "targetIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MentionInfo_FieldNumber_TargetIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MentionInfo__storage_, targetIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MentionInfo)
                                   messageName:@"MentionInfo"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MentionInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\013\000\002\000targetIds\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MentionInfo_MentionType_RawValue(MentionInfo *message) {
  GPBDescriptor *descriptor = [MentionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MentionInfo_FieldNumber_MentionType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMentionInfo_MentionType_RawValue(MentionInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [MentionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MentionInfo_FieldNumber_MentionType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - PushData

@implementation PushData

@dynamic title;
@dynamic pushId;
@dynamic pushText;
@dynamic pushExtraData;

typedef struct PushData__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *pushId;
  NSString *pushText;
  NSString *pushExtraData;
} PushData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = PushData_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushData__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushId",
        .dataTypeSpecific.clazz = Nil,
        .number = PushData_FieldNumber_PushId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushData__storage_, pushId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushText",
        .dataTypeSpecific.clazz = Nil,
        .number = PushData_FieldNumber_PushText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PushData__storage_, pushText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushExtraData",
        .dataTypeSpecific.clazz = Nil,
        .number = PushData_FieldNumber_PushExtraData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PushData__storage_, pushExtraData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PushData)
                                   messageName:@"PushData"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\002\006\000\003\010\000\004\r\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DownMsg

@implementation DownMsg

@dynamic targetId;
@dynamic channelType;
@dynamic msgType;
@dynamic senderId;
@dynamic msgId;
@dynamic msgIndex;
@dynamic msgContent;
@dynamic msgTime;
@dynamic flags;
@dynamic isSend;
@dynamic platform;
@dynamic clientUid;
@dynamic hasPushData, pushData;
@dynamic hasMentionInfo, mentionInfo;
@dynamic isReaded;

typedef struct DownMsg__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  int32_t flags;
  NSString *targetId;
  NSString *msgType;
  NSString *senderId;
  NSString *msgId;
  NSData *msgContent;
  NSString *platform;
  NSString *clientUid;
  PushData *pushData;
  MentionInfo *mentionInfo;
  int64_t msgIndex;
  int64_t msgTime;
} DownMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownMsg__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = DownMsg_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DownMsg__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_MsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DownMsg__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "senderId",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_SenderId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DownMsg__storage_, senderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_MsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DownMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_MsgIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DownMsg__storage_, msgIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_MsgContent,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DownMsg__storage_, msgContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_MsgTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DownMsg__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flags",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_Flags,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DownMsg__storage_, flags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isSend",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_IsSend,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "platform",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_Platform,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DownMsg__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientUid",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_ClientUid,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(DownMsg__storage_, clientUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushData",
        .dataTypeSpecific.clazz = GPBObjCClass(PushData),
        .number = DownMsg_FieldNumber_PushData,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(DownMsg__storage_, pushData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mentionInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(MentionInfo),
        .number = DownMsg_FieldNumber_MentionInfo,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(DownMsg__storage_, mentionInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isReaded",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsg_FieldNumber_IsReaded,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DownMsg)
                                   messageName:@"DownMsg"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\r\001\010\000\002\013\000\003\007\000\004\010\000\005\005\000\006\010\000\007\n\000\010\007\000\n\006\000\014\t\000\r\010\000\016\013\000\017\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DownMsg_ChannelType_RawValue(DownMsg *message) {
  GPBDescriptor *descriptor = [DownMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DownMsg_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDownMsg_ChannelType_RawValue(DownMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [DownMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DownMsg_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Notify

@implementation Notify

@dynamic type;
@dynamic syncTime;

typedef struct Notify__storage_ {
  uint32_t _has_storage_[1];
  NotifyType type;
  int64_t syncTime;
} Notify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = NotifyType_EnumDescriptor,
        .number = Notify_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Notify__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "syncTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Notify_FieldNumber_SyncTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Notify__storage_, syncTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Notify)
                                   messageName:@"Notify"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Notify__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Notify_Type_RawValue(Notify *message) {
  GPBDescriptor *descriptor = [Notify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notify_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetNotify_Type_RawValue(Notify *message, int32_t value) {
  GPBDescriptor *descriptor = [Notify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notify_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SyncMsgReq

@implementation SyncMsgReq

@dynamic syncTime;
@dynamic containsSendBox;
@dynamic sendBoxSyncTime;

typedef struct SyncMsgReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t syncTime;
  int64_t sendBoxSyncTime;
} SyncMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "syncTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SyncMsgReq_FieldNumber_SyncTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncMsgReq__storage_, syncTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "containsSendBox",
        .dataTypeSpecific.clazz = Nil,
        .number = SyncMsgReq_FieldNumber_ContainsSendBox,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendBoxSyncTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SyncMsgReq_FieldNumber_SendBoxSyncTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SyncMsgReq__storage_, sendBoxSyncTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SyncMsgReq)
                                   messageName:@"SyncMsgReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncMsgReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\010\000\002\017\000\003\017\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DownMsgSet

@implementation DownMsgSet

@dynamic msgsArray, msgsArray_Count;
@dynamic syncTime;
@dynamic isFinished;

typedef struct DownMsgSet__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
  int64_t syncTime;
} DownMsgSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DownMsg),
        .number = DownMsgSet_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DownMsgSet__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "syncTime",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsgSet_FieldNumber_SyncTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownMsgSet__storage_, syncTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isFinished",
        .dataTypeSpecific.clazz = Nil,
        .number = DownMsgSet_FieldNumber_IsFinished,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DownMsgSet)
                                   messageName:@"DownMsgSet"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownMsgSet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\002\010\000\003\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddHisMsgReq

@implementation AddHisMsgReq

@dynamic senderId;
@dynamic targetId;
@dynamic channelType;
@dynamic sendTime;
@dynamic hasMsg, msg;

typedef struct AddHisMsgReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *senderId;
  NSString *targetId;
  DownMsg *msg;
  int64_t sendTime;
} AddHisMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "senderId",
        .dataTypeSpecific.clazz = Nil,
        .number = AddHisMsgReq_FieldNumber_SenderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddHisMsgReq__storage_, senderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = AddHisMsgReq_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddHisMsgReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = AddHisMsgReq_FieldNumber_ChannelType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddHisMsgReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = AddHisMsgReq_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddHisMsgReq__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = GPBObjCClass(DownMsg),
        .number = AddHisMsgReq_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddHisMsgReq__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AddHisMsgReq)
                                   messageName:@"AddHisMsgReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddHisMsgReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\004\001\010\000\002\010\000\003\013\000\004\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AddHisMsgReq_ChannelType_RawValue(AddHisMsgReq *message) {
  GPBDescriptor *descriptor = [AddHisMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddHisMsgReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAddHisMsgReq_ChannelType_RawValue(AddHisMsgReq *message, int32_t value) {
  GPBDescriptor *descriptor = [AddHisMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddHisMsgReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryMsgLatestIndexReq

@implementation QryMsgLatestIndexReq

@dynamic converId;
@dynamic channelType;

typedef struct QryMsgLatestIndexReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *converId;
} QryMsgLatestIndexReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "converId",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMsgLatestIndexReq_FieldNumber_ConverId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryMsgLatestIndexReq__storage_, converId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = QryMsgLatestIndexReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryMsgLatestIndexReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryMsgLatestIndexReq)
                                   messageName:@"QryMsgLatestIndexReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryMsgLatestIndexReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\010\000\002\013\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QryMsgLatestIndexReq_ChannelType_RawValue(QryMsgLatestIndexReq *message) {
  GPBDescriptor *descriptor = [QryMsgLatestIndexReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMsgLatestIndexReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetQryMsgLatestIndexReq_ChannelType_RawValue(QryMsgLatestIndexReq *message, int32_t value) {
  GPBDescriptor *descriptor = [QryMsgLatestIndexReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMsgLatestIndexReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryMsgLatestIndexResp

@implementation QryMsgLatestIndexResp

@dynamic converId;
@dynamic channelType;
@dynamic msgIndex;

typedef struct QryMsgLatestIndexResp__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *converId;
  int64_t msgIndex;
} QryMsgLatestIndexResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "converId",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMsgLatestIndexResp_FieldNumber_ConverId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryMsgLatestIndexResp__storage_, converId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = QryMsgLatestIndexResp_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryMsgLatestIndexResp__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMsgLatestIndexResp_FieldNumber_MsgIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QryMsgLatestIndexResp__storage_, msgIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryMsgLatestIndexResp)
                                   messageName:@"QryMsgLatestIndexResp"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryMsgLatestIndexResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\010\000\002K\000\003\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QryMsgLatestIndexResp_ChannelType_RawValue(QryMsgLatestIndexResp *message) {
  GPBDescriptor *descriptor = [QryMsgLatestIndexResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMsgLatestIndexResp_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetQryMsgLatestIndexResp_ChannelType_RawValue(QryMsgLatestIndexResp *message, int32_t value) {
  GPBDescriptor *descriptor = [QryMsgLatestIndexResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMsgLatestIndexResp_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryHisMsgsReq

@implementation QryHisMsgsReq

@dynamic targetId;
@dynamic channelType;
@dynamic startTime;
@dynamic count;
@dynamic order;

typedef struct QryHisMsgsReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  int32_t count;
  int32_t order;
  NSString *targetId;
  int64_t startTime;
} QryHisMsgsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = QryHisMsgsReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryHisMsgsReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = QryHisMsgsReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryHisMsgsReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = QryHisMsgsReq_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QryHisMsgsReq__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = QryHisMsgsReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QryHisMsgsReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "order",
        .dataTypeSpecific.clazz = Nil,
        .number = QryHisMsgsReq_FieldNumber_Order,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QryHisMsgsReq__storage_, order),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryHisMsgsReq)
                                   messageName:@"QryHisMsgsReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryHisMsgsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\010\000\002\013\000\003\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QryHisMsgsReq_ChannelType_RawValue(QryHisMsgsReq *message) {
  GPBDescriptor *descriptor = [QryHisMsgsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryHisMsgsReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetQryHisMsgsReq_ChannelType_RawValue(QryHisMsgsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [QryHisMsgsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryHisMsgsReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryConversationsReq

@implementation QryConversationsReq

@dynamic startTime;
@dynamic count;
@dynamic order;

typedef struct QryConversationsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  int32_t order;
  int64_t startTime;
} QryConversationsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = QryConversationsReq_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryConversationsReq__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = QryConversationsReq_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryConversationsReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "order",
        .dataTypeSpecific.clazz = Nil,
        .number = QryConversationsReq_FieldNumber_Order,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QryConversationsReq__storage_, order),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryConversationsReq)
                                   messageName:@"QryConversationsReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryConversationsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QryConversationsResp

@implementation QryConversationsResp

@dynamic conversationsArray, conversationsArray_Count;
@dynamic isFinished;

typedef struct QryConversationsResp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *conversationsArray;
} QryConversationsResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Conversation),
        .number = QryConversationsResp_FieldNumber_ConversationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QryConversationsResp__storage_, conversationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isFinished",
        .dataTypeSpecific.clazz = Nil,
        .number = QryConversationsResp_FieldNumber_IsFinished,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryConversationsResp)
                                   messageName:@"QryConversationsResp"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryConversationsResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Conversation

@implementation Conversation

@dynamic targetId;
@dynamic channelType;
@dynamic updateTime;
@dynamic unreadCount;
@dynamic hasMsg, msg;
@dynamic latestReadedMsgIndex;
@dynamic hasLatestMentionMsg, latestMentionMsg;

typedef struct Conversation__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *targetId;
  DownMsg *msg;
  MentionMsg *latestMentionMsg;
  int64_t updateTime;
  int64_t unreadCount;
  int64_t latestReadedMsgIndex;
} Conversation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = Conversation_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Conversation__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = Conversation_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Conversation__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Conversation_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Conversation__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unreadCount",
        .dataTypeSpecific.clazz = Nil,
        .number = Conversation_FieldNumber_UnreadCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Conversation__storage_, unreadCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = GPBObjCClass(DownMsg),
        .number = Conversation_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Conversation__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestReadedMsgIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = Conversation_FieldNumber_LatestReadedMsgIndex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Conversation__storage_, latestReadedMsgIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latestMentionMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(MentionMsg),
        .number = Conversation_FieldNumber_LatestMentionMsg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Conversation__storage_, latestMentionMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Conversation)
                                   messageName:@"Conversation"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Conversation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\006\002\010\000\003\013\000\004\n\000\005\013\000\007\024\000\010P\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Conversation_ChannelType_RawValue(Conversation *message) {
  GPBDescriptor *descriptor = [Conversation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Conversation_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetConversation_ChannelType_RawValue(Conversation *message, int32_t value) {
  GPBDescriptor *descriptor = [Conversation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Conversation_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MentionMsg

@implementation MentionMsg

@dynamic mentionType;
@dynamic senderId;
@dynamic msgId;
@dynamic msgIndex;
@dynamic msgTime;

typedef struct MentionMsg__storage_ {
  uint32_t _has_storage_[1];
  MentionType mentionType;
  NSString *senderId;
  NSString *msgId;
  int64_t msgIndex;
  int64_t msgTime;
} MentionMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentionType",
        .dataTypeSpecific.enumDescFunc = MentionType_EnumDescriptor,
        .number = MentionMsg_FieldNumber_MentionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MentionMsg__storage_, mentionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "senderId",
        .dataTypeSpecific.clazz = Nil,
        .number = MentionMsg_FieldNumber_SenderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MentionMsg__storage_, senderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MentionMsg_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MentionMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = MentionMsg_FieldNumber_MsgIndex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MentionMsg__storage_, msgIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = MentionMsg_FieldNumber_MsgTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MentionMsg__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MentionMsg)
                                   messageName:@"MentionMsg"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MentionMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\005\001\013\000\002\010\000\003\005\000\004\010\000\005\007\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MentionMsg_MentionType_RawValue(MentionMsg *message) {
  GPBDescriptor *descriptor = [MentionMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MentionMsg_FieldNumber_MentionType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMentionMsg_MentionType_RawValue(MentionMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [MentionMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MentionMsg_FieldNumber_MentionType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryMentionMsgsReq

@implementation QryMentionMsgsReq

@dynamic targetId;
@dynamic channelType;
@dynamic startIndex;
@dynamic count;
@dynamic order;

typedef struct QryMentionMsgsReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  int32_t count;
  int32_t order;
  NSString *targetId;
  int64_t startIndex;
} QryMentionMsgsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMentionMsgsReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryMentionMsgsReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = QryMentionMsgsReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryMentionMsgsReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMentionMsgsReq_FieldNumber_StartIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QryMentionMsgsReq__storage_, startIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMentionMsgsReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QryMentionMsgsReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "order",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMentionMsgsReq_FieldNumber_Order,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QryMentionMsgsReq__storage_, order),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryMentionMsgsReq)
                                   messageName:@"QryMentionMsgsReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryMentionMsgsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\010\000\002\013\000\003\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QryMentionMsgsReq_ChannelType_RawValue(QryMentionMsgsReq *message) {
  GPBDescriptor *descriptor = [QryMentionMsgsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMentionMsgsReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetQryMentionMsgsReq_ChannelType_RawValue(QryMentionMsgsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [QryMentionMsgsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QryMentionMsgsReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryMentionMsgsResp

@implementation QryMentionMsgsResp

@dynamic mentionMsgsArray, mentionMsgsArray_Count;
@dynamic isFinished;

typedef struct QryMentionMsgsResp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *mentionMsgsArray;
} QryMentionMsgsResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentionMsgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MentionMsg),
        .number = QryMentionMsgsResp_FieldNumber_MentionMsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QryMentionMsgsResp__storage_, mentionMsgsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isFinished",
        .dataTypeSpecific.clazz = Nil,
        .number = QryMentionMsgsResp_FieldNumber_IsFinished,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryMentionMsgsResp)
                                   messageName:@"QryMentionMsgsResp"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryMentionMsgsResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\000mentionMsgs\000\002\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncConversationsReq

@implementation SyncConversationsReq

@dynamic startTime;
@dynamic count;

typedef struct SyncConversationsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  int64_t startTime;
} SyncConversationsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SyncConversationsReq_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncConversationsReq__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = SyncConversationsReq_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SyncConversationsReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SyncConversationsReq)
                                   messageName:@"SyncConversationsReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncConversationsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelConversationReq

@implementation DelConversationReq

@dynamic conversationsArray, conversationsArray_Count;

typedef struct DelConversationReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *conversationsArray;
} DelConversationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Conversation),
        .number = DelConversationReq_FieldNumber_ConversationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DelConversationReq__storage_, conversationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DelConversationReq)
                                   messageName:@"DelConversationReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelConversationReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClearUnreadReq

@implementation ClearUnreadReq

@dynamic conversationsArray, conversationsArray_Count;

typedef struct ClearUnreadReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *conversationsArray;
} ClearUnreadReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Conversation),
        .number = ClearUnreadReq_FieldNumber_ConversationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClearUnreadReq__storage_, conversationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClearUnreadReq)
                                   messageName:@"ClearUnreadReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClearUnreadReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecallMsgReq

@implementation RecallMsgReq

@dynamic targetId;
@dynamic channelType;
@dynamic msgId;
@dynamic msgTime;
@dynamic msgType;
@dynamic msgContent;

typedef struct RecallMsgReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *targetId;
  NSString *msgId;
  NSString *msgType;
  NSData *msgContent;
  int64_t msgTime;
} RecallMsgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = RecallMsgReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = RecallMsgReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = RecallMsgReq_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = RecallMsgReq_FieldNumber_MsgTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = RecallMsgReq_FieldNumber_MsgType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgContent",
        .dataTypeSpecific.clazz = Nil,
        .number = RecallMsgReq_FieldNumber_MsgContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RecallMsgReq__storage_, msgContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(RecallMsgReq)
                                   messageName:@"RecallMsgReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecallMsgReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\006\001\010\000\002\013\000\003\005\000\004\007\000\005\007\000\006\n\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RecallMsgReq_ChannelType_RawValue(RecallMsgReq *message) {
  GPBDescriptor *descriptor = [RecallMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecallMsgReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRecallMsgReq_ChannelType_RawValue(RecallMsgReq *message, int32_t value) {
  GPBDescriptor *descriptor = [RecallMsgReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecallMsgReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MarkReadReq

@implementation MarkReadReq

@dynamic targetId;
@dynamic channelType;
@dynamic msgsArray, msgsArray_Count;
@dynamic indexScopesArray, indexScopesArray_Count;

typedef struct MarkReadReq__storage_ {
  uint32_t _has_storage_[1];
  ChannelType channelType;
  NSString *targetId;
  NSMutableArray *msgsArray;
  NSMutableArray *indexScopesArray;
} MarkReadReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = MarkReadReq_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MarkReadReq__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelType",
        .dataTypeSpecific.enumDescFunc = ChannelType_EnumDescriptor,
        .number = MarkReadReq_FieldNumber_ChannelType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MarkReadReq__storage_, channelType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SimpleMsg),
        .number = MarkReadReq_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MarkReadReq__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "indexScopesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexScope),
        .number = MarkReadReq_FieldNumber_IndexScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MarkReadReq__storage_, indexScopesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MarkReadReq)
                                   messageName:@"MarkReadReq"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MarkReadReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\010\000\002\013\000\004\000indexScopes\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MarkReadReq_ChannelType_RawValue(MarkReadReq *message) {
  GPBDescriptor *descriptor = [MarkReadReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MarkReadReq_FieldNumber_ChannelType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMarkReadReq_ChannelType_RawValue(MarkReadReq *message, int32_t value) {
  GPBDescriptor *descriptor = [MarkReadReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MarkReadReq_FieldNumber_ChannelType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SimpleMsg

@implementation SimpleMsg

@dynamic msgId;
@dynamic msgTime;
@dynamic msgIndex;

typedef struct SimpleMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *msgId;
  int64_t msgTime;
  int64_t msgIndex;
} SimpleMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = SimpleMsg_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SimpleMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SimpleMsg_FieldNumber_MsgTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SimpleMsg__storage_, msgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SimpleMsg_FieldNumber_MsgIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SimpleMsg__storage_, msgIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SimpleMsg)
                                   messageName:@"SimpleMsg"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SimpleMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\003\001\005\000\002\007\000\003\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IndexScope

@implementation IndexScope

@dynamic startIndex;
@dynamic endIndex;

typedef struct IndexScope__storage_ {
  uint32_t _has_storage_[1];
  int64_t startIndex;
  int64_t endIndex;
} IndexScope__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = IndexScope_FieldNumber_StartIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IndexScope__storage_, startIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = IndexScope_FieldNumber_EndIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IndexScope__storage_, endIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(IndexScope)
                                   messageName:@"IndexScope"
                               fileDescription:&AppmessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IndexScope__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
