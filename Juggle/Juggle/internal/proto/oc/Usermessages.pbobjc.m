// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: usermessages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Usermessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(BanUser);
GPBObjCClassDeclaration(BanUsersReq);
GPBObjCClassDeclaration(QryBanUsersReq);
GPBObjCClassDeclaration(QryBanUsersResp);
GPBObjCClassDeclaration(UserOnlineItem);
GPBObjCClassDeclaration(UserOnlineStatusReq);
GPBObjCClassDeclaration(UserOnlineStatusResp);

#pragma mark - UsermessagesRoot

@implementation UsermessagesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription UsermessagesRoot_FileDescription = {
  .package = "user_messages",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum BanType

GPBEnumDescriptor *BanType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Permanent\000Temporary\000";
    static const int32_t values[] = {
        BanType_Permanent,
        BanType_Temporary,
    };
    static const char *extraTextFormatInfo = "\002\000\t\000\001\t\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BanType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BanType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BanType_IsValidValue(int32_t value__) {
  switch (value__) {
    case BanType_Permanent:
    case BanType_Temporary:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserOnlineStatusReq

@implementation UserOnlineStatusReq

@dynamic userIdsArray, userIdsArray_Count;

typedef struct UserOnlineStatusReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userIdsArray;
} UserOnlineStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = UserOnlineStatusReq_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserOnlineStatusReq__storage_, userIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(UserOnlineStatusReq)
                                   messageName:@"UserOnlineStatusReq"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserOnlineStatusReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\000userIds\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserOnlineStatusResp

@implementation UserOnlineStatusResp

@dynamic itemsArray, itemsArray_Count;

typedef struct UserOnlineStatusResp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} UserOnlineStatusResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UserOnlineItem),
        .number = UserOnlineStatusResp_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserOnlineStatusResp__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(UserOnlineStatusResp)
                                   messageName:@"UserOnlineStatusResp"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserOnlineStatusResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserOnlineItem

@implementation UserOnlineItem

@dynamic userId;
@dynamic isOnline;

typedef struct UserOnlineItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} UserOnlineItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = UserOnlineItem_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserOnlineItem__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isOnline",
        .dataTypeSpecific.clazz = Nil,
        .number = UserOnlineItem_FieldNumber_IsOnline,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(UserOnlineItem)
                                   messageName:@"UserOnlineItem"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserOnlineItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\006\000\002\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BanUsersReq

@implementation BanUsersReq

@dynamic userIdsArray, userIdsArray_Count;
@dynamic banType;
@dynamic endTime;
@dynamic isAdd;

typedef struct BanUsersReq__storage_ {
  uint32_t _has_storage_[1];
  BanType banType;
  NSMutableArray *userIdsArray;
  int64_t endTime;
} BanUsersReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUsersReq_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BanUsersReq__storage_, userIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "banType",
        .dataTypeSpecific.enumDescFunc = BanType_EnumDescriptor,
        .number = BanUsersReq_FieldNumber_BanType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BanUsersReq__storage_, banType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUsersReq_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BanUsersReq__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isAdd",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUsersReq_FieldNumber_IsAdd,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(BanUsersReq)
                                   messageName:@"BanUsersReq"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BanUsersReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\004\001\000userIds\000\002\007\000\003\007\000\004\005\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BanUsersReq_BanType_RawValue(BanUsersReq *message) {
  GPBDescriptor *descriptor = [BanUsersReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BanUsersReq_FieldNumber_BanType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetBanUsersReq_BanType_RawValue(BanUsersReq *message, int32_t value) {
  GPBDescriptor *descriptor = [BanUsersReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BanUsersReq_FieldNumber_BanType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - BanUser

@implementation BanUser

@dynamic userId;
@dynamic banType;
@dynamic endTime;
@dynamic createdTime;

typedef struct BanUser__storage_ {
  uint32_t _has_storage_[1];
  BanType banType;
  NSString *userId;
  int64_t endTime;
  int64_t createdTime;
} BanUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUser_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BanUser__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "banType",
        .dataTypeSpecific.enumDescFunc = BanType_EnumDescriptor,
        .number = BanUser_FieldNumber_BanType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BanUser__storage_, banType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUser_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BanUser__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdTime",
        .dataTypeSpecific.clazz = Nil,
        .number = BanUser_FieldNumber_CreatedTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BanUser__storage_, createdTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(BanUser)
                                   messageName:@"BanUser"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BanUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\004\001\006\000\002\007\000\003\007\000\004\013\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BanUser_BanType_RawValue(BanUser *message) {
  GPBDescriptor *descriptor = [BanUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BanUser_FieldNumber_BanType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetBanUser_BanType_RawValue(BanUser *message, int32_t value) {
  GPBDescriptor *descriptor = [BanUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BanUser_FieldNumber_BanType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QryBanUsersReq

@implementation QryBanUsersReq

@dynamic limit;
@dynamic offset;

typedef struct QryBanUsersReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *offset;
  int64_t limit;
} QryBanUsersReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = QryBanUsersReq_FieldNumber_Limit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryBanUsersReq__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = QryBanUsersReq_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QryBanUsersReq__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryBanUsersReq)
                                   messageName:@"QryBanUsersReq"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryBanUsersReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QryBanUsersResp

@implementation QryBanUsersResp

@dynamic itemsArray, itemsArray_Count;
@dynamic offset;

typedef struct QryBanUsersResp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
  NSString *offset;
} QryBanUsersResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(BanUser),
        .number = QryBanUsersResp_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QryBanUsersResp__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = QryBanUsersResp_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QryBanUsersResp__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QryBanUsersResp)
                                   messageName:@"QryBanUsersResp"
                               fileDescription:&UsermessagesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QryBanUsersResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
